
<!DOCTYPE html>
<html>
<head>
    <script src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.js"></script>
</head>
<body>
    <script>
    var config = {
        type: Phaser.AUTO,
        width: 1926,
        height: 606,
        physics: {
            default: 'arcade',
        },

        scene: {
            preload: preload,
            create: create,
            update: update,
        }
    };
    var game = new Phaser.Game(config);
    var platforms;
    var buildings;
    var player;
    var tar1;
    var tar2;
    var targets = [];
    var targetcount = 2;
    var vel=20;
    var cursors;
    var keys;
    var space;
    var gui;
    var guiTimer;
    var dir;
    var arr=[];

    class Player extends Phaser.Physics.Arcade.Sprite
    {
        totalJumps = 2;
        currentJumps = 0;
        constructor(scene, x, y, spritesheet, character, animations)
        {
            super(scene, x, y, spritesheet, character);
            this.animations = animations;
            scene.add.existing(this);
            scene.physics.add.existing(this);
            this.setScale(.04);
            this.setCollideWorldBounds(true);
            this.setGravityY(3000); //We will set gravity *per object* rather than for the scene!
        }
    }

    class Targets extends Phaser.Physics.Arcade.Sprite
    {

        constructor(scene, x, y, x1, x2, spritesheet, character, animations)
        {

            super(scene, x, y, x1, x2, spritesheet, character);
            this.animations = animations;
            scene.add.existing(this);
            scene.physics.add.existing(this);
            this.setCollideWorldBounds(false);
            this.setScale(.04);
            this.setGravityY(0);
            scene.physics.add.collider(platforms);
          //  var didCollide = scene.physics.world.collide(arr);

            var y1 = x1;
            var y2 = x2;
           //  if(didCollide)
           //  {
           //    if(dir===0&&vel>0)
           //    {
           //      this.disableBody(true, true);
           //   targetcount--;
           //    }
           //    if(dir===1&&vel<0)
           //    {
           //    this.disableBody(true, true);
           // targetcount--;
           //    }
           //
          }
      }



    function preload()
    {
        this.load.image('sky', 'assets/background.png');
        this.load.image('platform', 'assets/platform.png');
        this.load.atlas('characters', 'assets/texture.png' , 'assets/texture.json');


    }

    function create()
    {
       let background = this.add.tileSprite(0, 0, game.scale.width, game.scale.height, 'sky').setOrigin(0, 0);

      let playerAnims = [];
      let playerWalkAnim = this.anims.create({key: 'player' , frames: this.anims.generateFrameNames ('characters' , {prefix: 'playerWalkRight' ,start: 0,  end: 3 , zeroPad: 2}), repeat: -1});
      playerAnims['playerWalkAnim'] = playerWalkAnim;

      let policeAnims = [];
      let policeWalkAnim = this.anims.create({key: 'police' , frames: this.anims.generateFrameNames ('characters' , {prefix: 'policeOfficerWalk' , start: 0, end: 3 , zeroPad: 2}), repeat: -1, frameRate: 9});
      policeAnims['policeWalkAnim'] = policeWalkAnim;

      // this.anims.create({key: 'greenCivilian' , frames: this.anims.generateFrameNames ('texture' , {prefix: 'greenCivilianWalkRight' ,start: 0,  end: 3 , zeroPad: 2}), repeat: -1});
      let redTargetAnims = [];
      let redTargetWalkAnim = this.anims.create({key: 'target1' , frames: this.anims.generateFrameNames ('characters' , {prefix: 'redCivilianWalkRight' , start: 0, end: 3 , zeroPad: 2}), repeat: -1, frameRate: 9});
      redTargetAnims['redTargetWalkAnim'] = redTargetWalkAnim;

      let greenTargetAnims = [];
      let greenTargetWalkAnim = this.anims.create({key: 'target2' , frames: this.anims.generateFrameNames ('characters' , {prefix: 'greenCivilianWalkRight' ,start: 0,  end: 3 , zeroPad: 2}), repeat: -1, frameRate: 9});
      greenTargetAnims['greenTargetWalkAnim'] = greenTargetWalkAnim;


      createPlatforms(this);
      player = new Player(this, 50, 400, 'characters', 'player', playerAnims);
      this.physics.add.collider(player, platforms);
      player.setScale(1.3);



      tar1 = new Targets(this, 210,465, 210, 290, 'characters', 'target1' , redTargetAnims); //*******
      tar1.setScale(1.3);


      tar2 = new Targets(this, 600,530, 600, 800 , 'characters', 'target2' , greenTargetAnims);
      tar2.setScale(1.3);

      arr.push(tar2);

      this.physics.add.overlap(player, targets, eatCarrot, null, this);

      cursors = this.input.keyboard.createCursorKeys();
      keys = this.input.keyboard.addKeys('A, D');
      space = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);
      space.on('down', jump); //calls jump function when space is pressed

      gui = this.add.text(16, 16, '', {fontSize: '32px', fill: '#000'});

arr.push(tar1);
arr.push(player);

   }

   function createPlatforms(scene)
   {
   platforms = scene.physics.add.staticGroup();

   let basePlatform = platforms.create(200, 600, 'platform');
   basePlatform.setScale(3, 1).refreshBody();

   let building1=  platforms.create(250,300,'platform');
   building1.setScale(.19, 3).refreshBody();
   let buildingbot1=  platforms.create(250,600,'platform');
   buildingbot1.setScale(.19, 3).refreshBody();
   }

   function update()
   {
       player.setVelocityX(0);
       player.setDragX(1000);

       // for(var i = 0; i < arr.length; i++){
       //   //timer
       //   if(arr[i].x<=arr[i].y1)
       //   {
       //     arr[i].setVelocityX(50);
       //     vel=50;
       //     console.log('yes');
       //   }
       //   if(arr[i].x>=arr[i].y2)
       //   {
       //     arr[i].setVelocityX(-50);
       //     vel=-50;
       //   }
       // }
       if (player.body.touching.down)
       {
           player.currentJumps = 0;
       }
       if (cursors.left.isDown || keys.A.isDown)
       {
           player.setVelocityX(-400);
           player.setFlipX(true);
           dir=1;
           player.play(player.animations['playerWalkAnim'], true);
       } else if (cursors.right.isDown || keys.D.isDown)
       {
           player.setVelocityX(400);
           player.setFlipX(false);
           dir=0;
           player.play(player.animations['playerWalkAnim'], true);
       } else {
         player.play(player.animations['playerWalkAnim'], false);

       }
       if(targetcount===0)
       {
         gui.setText('you win');
       }

       if(tar1.x>291)
       {
         tar1.setVelocityX(-20);
         tar1.setFlipX(true);
         vel=-20;
         tar1.play(tar1.animations['redTargetWalkAnim'], true);

    //     tar1.play(tar1.animations['policeWalkAnim'], true);

       }
       if(tar1.x<211)
       {
         tar1.setVelocityX(20);
         tar1.setFlipX(false);
         vel=20;
         tar1.play(tar1.animations['redTargetWalkAnim'], true);


    //     tar1.play(tar1.animations['policeWalkAnim'], true);
       }
       if(tar2.x>801)
       {
         tar2.setVelocityX(-20);
         tar2.setFlipX(true);
         vel=-20;
         tar2.play(tar2.animations['greenTargetWalkAnim'], true);
    //   tar2.play(tar2.animations['greenTargetWalkAnim'], true);
       }
       if(tar2.x<601)
       {
         tar2.setVelocityX(20);
         tar2.setFlipX(false);
         vel=20;
         tar2.play(tar2.animations['greenTargetWalkAnim'], true);
         //tar2.play(tar2.animations['greenTargetWalkAnim'], true);
       }
       this.physics.add.overlap(player, tar1, eatCarrot, null, this);
       this.physics.add.overlap(player, tar2, eatCarrot1, null, this);

       // if(dir===0&&vel<0 &&player.x+500<tar1.x)
       //     {
       //       player.disableBody(true,true)
       //       gui.setText('you lose');
       //     }
       //     if(dir===1&&vel>0&&player.x+500<tar1.x)
       //     {
       //       player.disableBody(true,true)
       //       gui.setText('you lose');
       //     }
       }




   function jump(event)
   {
       if (player.body.touching.down) {
         player.setVelocityY(-1100);
         player.currentJumps++;
   }
   }
     function eatCarrot()
   {
     console.log('hi');
        if(dir===0&&vel>0)
        {
          tar1.disableBody(true, true);
       targetcount--;
        }
        if(dir===1&&vel<0)
        {
        tar1.disableBody(true, true);
     targetcount--;
        }
        if(dir===0 &&vel<0)
        {
          player.disableBody(true,true);
          gui.setText('you lose');
        }
        if (dir===1 && vel>0)
        {
          player.disableBody(true, true);
          gui.setText('you lose');
        }
        if(targetcount===0)
        {
          gui.setText('you win');
        }
      }
      function eatCarrot1()
    {
      console.log('hi');
         if(dir===0&&vel>0)
         {
           tar2.disableBody(true, true);
        targetcount--;
         }
         if(dir===1&&vel<0)
         {
         tar2.disableBody(true, true);
      targetcount--;
         }
         if(targetcount===0)
         {
           gui.setText('you win');
         }
         if(dir===0 &&vel<0)
         {
           player.disableBody(true,true);
           gui.setText('you lose');
         }
         if (dir===1 && vel>0)
         {
           player.disableBody(true, true);
           gui.setText('you lose');
         }
       }


               //  if(dir===0&&vel>0)
               //  {
               //    tar1.disableBody(true, true);
               // targetcount--;
               //  }
               //  if(dir===1&&vel<0)
               //  {
               //  tar1.disableBody(true, true);
               //  targetcount--;
               //  }


   </script>
</body>
</html>
